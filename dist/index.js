"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const grammy_1 = require("grammy");
const dotenv = __importStar(require("dotenv"));
const axios_1 = __importDefault(require("axios"));
dotenv.config();
// Bot configuration
const ALLOWED_GROUP_ID = -1002567822254;
const BOT_NAME = "ARK-1";
const BOT_PLATFORM = "PLEXY";
const BOT_CREATOR = "@samgay_nis";
// Bot introduction message
const BOT_INTRO = `üëã –ü—Ä–∏–≤–µ—Ç! –Ø ${BOT_NAME}, –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ ${BOT_PLATFORM}.
–°–æ–∑–¥–∞–Ω –∫–æ–º–ø–∞–Ω–∏–µ–π ${BOT_CREATOR}.
–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.`;
// Check if environment variables are set
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;
const YOUR_SITE_URL = process.env.YOUR_SITE_URL || 'https://tgaibot.example.com';
const YOUR_SITE_NAME = process.env.YOUR_SITE_NAME || 'TelegramAIBot';
if (!TELEGRAM_BOT_TOKEN || !OPENROUTER_API_KEY) {
    console.error('–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENROUTER_API_KEY –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ —Ñ–∞–π–ª–µ .env');
    process.exit(1);
}
// Initialize the bot
const bot = new grammy_1.Bot(TELEGRAM_BOT_TOKEN);
// Configure sessions
bot.use((0, grammy_1.session)({
    initial: () => ({
        waitingForCompletion: false,
    }),
}));
// Check if message is from allowed group
function isAllowedGroup(ctx) {
    return ctx.chat?.type === "private" || ctx.chat?.id === ALLOWED_GROUP_ID;
}
// Create main keyboard
function getMainKeyboard() {
    return new grammy_1.Keyboard()
        .text("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
        .text("üì∏ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        .row()
        .text("‚ÑπÔ∏è –û –±–æ—Ç–µ")
        .text("üìö –ü–æ–º–æ—â—å")
        .resized();
}
// Handle start command
bot.command("start", async (ctx) => {
    if (!isAllowedGroup(ctx))
        return;
    await ctx.reply(BOT_INTRO, {
        reply_markup: getMainKeyboard(),
    });
});
// Handle help command
bot.command("help", async (ctx) => {
    if (!isAllowedGroup(ctx))
        return;
    const helpText = `üìö *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º ${BOT_NAME}*:

1Ô∏è‚É£ *–ü—Ä—è–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è*: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å
2Ô∏è‚É£ *–ö–æ–º–∞–Ω–¥–∞ –≤ —á–∞—Ç–µ*: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /ai + –≤–∞—à –≤–æ–ø—Ä–æ—Å
3Ô∏è‚É£ *–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ*: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–º
4Ô∏è‚É£ *–ö–Ω–æ–ø–∫–∏*: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

–°–æ–∑–¥–∞–Ω–æ –∫–æ–º–ø–∞–Ω–∏–µ–π ${BOT_CREATOR} –Ω–∞ –±–∞–∑–µ ${BOT_PLATFORM}.`;
    await ctx.reply(helpText, {
        parse_mode: "Markdown",
        reply_markup: getMainKeyboard(),
    });
});
// Handle about command
bot.command("about", async (ctx) => {
    if (!isAllowedGroup(ctx))
        return;
    await ctx.reply(`‚ÑπÔ∏è *–û –±–æ—Ç–µ*\n\n–Ø ${BOT_NAME}, –ø–µ—Ä–µ–¥–æ–≤–æ–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –Ω–∞ –±–∞–∑–µ ${BOT_PLATFORM}.\n–°–æ–∑–¥–∞–Ω –∫–æ–º–ø–∞–Ω–∏–µ–π ${BOT_CREATOR}.\n\n–í–µ—Ä—Å–∏—è: 1.0.0`, {
        parse_mode: "Markdown",
        reply_markup: getMainKeyboard(),
    });
});
// Handle keyboard button presses
bot.hears("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", async (ctx) => {
    if (!isAllowedGroup(ctx))
        return;
    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:", {
        reply_markup: { remove_keyboard: true },
    });
});
bot.hears("üì∏ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", async (ctx) => {
    if (!isAllowedGroup(ctx))
        return;
    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", {
        reply_markup: { remove_keyboard: true },
    });
});
bot.hears("‚ÑπÔ∏è –û –±–æ—Ç–µ", async (ctx) => {
    if (!isAllowedGroup(ctx))
        return;
    await ctx.reply(`‚ÑπÔ∏è *–û –±–æ—Ç–µ*\n\n–Ø ${BOT_NAME}, –ø–µ—Ä–µ–¥–æ–≤–æ–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –Ω–∞ –±–∞–∑–µ ${BOT_PLATFORM}.\n–°–æ–∑–¥–∞–Ω –∫–æ–º–ø–∞–Ω–∏–µ–π ${BOT_CREATOR}.\n\n–í–µ—Ä—Å–∏—è: 1.0.0`, {
        parse_mode: "Markdown",
        reply_markup: getMainKeyboard(),
    });
});
bot.hears("üìö –ü–æ–º–æ—â—å", async (ctx) => {
    if (!isAllowedGroup(ctx))
        return;
    const helpText = `üìö *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º ${BOT_NAME}*:

1Ô∏è‚É£ *–ü—Ä—è–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è*: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å
2Ô∏è‚É£ *–ö–æ–º–∞–Ω–¥–∞ –≤ —á–∞—Ç–µ*: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /ai + –≤–∞—à –≤–æ–ø—Ä–æ—Å
3Ô∏è‚É£ *–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ*: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–º
4Ô∏è‚É£ *–ö–Ω–æ–ø–∫–∏*: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

–°–æ–∑–¥–∞–Ω–æ –∫–æ–º–ø–∞–Ω–∏–µ–π ${BOT_CREATOR} –Ω–∞ –±–∞–∑–µ ${BOT_PLATFORM}.`;
    await ctx.reply(helpText, {
        parse_mode: "Markdown",
        reply_markup: getMainKeyboard(),
    });
});
// Handle direct messages (excluding commands)
bot.on('message:text', async (ctx) => {
    // Skip if not allowed group
    if (!isAllowedGroup(ctx))
        return;
    // Skip if it's a command
    if (ctx.message.text.startsWith('/'))
        return;
    // Handle the message
    await handleAIRequest(ctx, ctx.message.text);
});
// Handle photo messages
bot.on('message:photo', async (ctx) => {
    // Skip if not allowed group
    if (!isAllowedGroup(ctx))
        return;
    try {
        if (ctx.session.waitingForCompletion) {
            await ctx.reply("–Ø –≤—Å–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.");
            return;
        }
        // Set waiting status
        ctx.session.waitingForCompletion = true;
        // Send typing indicator
        await ctx.api.sendChatAction(ctx.chat.id, "typing");
        // Get photo details
        const photoInfo = ctx.message.photo;
        const fileId = photoInfo[photoInfo.length - 1].file_id; // Get highest quality image
        // Get file path
        const fileInfo = await ctx.api.getFile(fileId);
        const filePath = fileInfo.file_path;
        // Form full photo URL
        const photoUrl = `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${filePath}`;
        // Get caption if any, or use default
        const caption = ctx.message.caption || "–û–ø–∏—à–∏, —á—Ç–æ –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏";
        // Notify user that we're processing
        const statusMsg = await ctx.reply("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...");
        // Call OpenRouter API with the image
        const response = await callOpenRouterAPIWithImage(caption, photoUrl);
        // Delete the status message
        await ctx.api.deleteMessage(ctx.chat.id, statusMsg.message_id);
        // Build inline keyboard for more actions
        const inlineKeyboard = new grammy_1.InlineKeyboard()
            .text("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", "more_details")
            .text("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏", "translate");
        // Send the AI response
        await ctx.reply(response, {
            parse_mode: 'Markdown',
            disable_web_page_preview: true,
            reply_markup: inlineKeyboard,
        });
    }
    catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
    }
    finally {
        // Reset waiting status
        ctx.session.waitingForCompletion = false;
        // Always show main keyboard after processing
        await ctx.reply("–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", {
            reply_markup: getMainKeyboard(),
        });
    }
});
// Handle inline keyboard callbacks
bot.callbackQuery("more_details", async (ctx) => {
    if (!isAllowedGroup(ctx))
        return;
    await ctx.answerCallbackQuery("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...");
    await ctx.reply("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...");
    // Get the message that was replied to (which contains the image)
    const messageWithImage = ctx.callbackQuery.message?.reply_to_message;
    if (messageWithImage && 'photo' in messageWithImage) {
        // Process with a different prompt for more details
        await handleAIRequest(ctx, "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è –º–µ–ª—å—á–∞–π—à–∏–µ –¥–µ—Ç–∞–ª–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç");
    }
    else {
        await ctx.reply("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.");
    }
});
bot.callbackQuery("translate", async (ctx) => {
    if (!isAllowedGroup(ctx))
        return;
    await ctx.answerCallbackQuery("–ü–µ—Ä–µ–≤–æ–¥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...");
    await ctx.reply("–ü–µ—Ä–µ–≤–æ–∂—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫...");
    const messageWithImage = ctx.callbackQuery.message?.reply_to_message;
    if (messageWithImage && 'photo' in messageWithImage) {
        // Process with translation prompt
        await handleAIRequest(ctx, "–ü–µ—Ä–µ–≤–µ–¥–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫");
    }
    else {
        await ctx.reply("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.");
    }
});
// Handle /ai command in groups and direct messages
bot.command('ai', async (ctx) => {
    // Skip if not allowed group
    if (!isAllowedGroup(ctx))
        return;
    const queryText = ctx.match;
    if (!queryText) {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ai. –ù–∞–ø—Ä–∏–º–µ—Ä: /ai –ö–∞–∫–∞—è —Å—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?');
        return;
    }
    await handleAIRequest(ctx, queryText);
});
// Handler for AI requests
async function handleAIRequest(ctx, query) {
    if (ctx.session.waitingForCompletion) {
        await ctx.reply("–Ø –≤—Å–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.");
        return;
    }
    try {
        // Set waiting status
        ctx.session.waitingForCompletion = true;
        // Send typing indicator
        await ctx.api.sendChatAction(ctx.chat.id, "typing");
        // Notify user that we're processing
        const statusMsg = await ctx.reply("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...");
        // Call OpenRouter API
        const response = await callOpenRouterAPI(query);
        // Delete the status message
        await ctx.api.deleteMessage(ctx.chat.id, statusMsg.message_id);
        // Send the AI response
        await ctx.reply(response, {
            parse_mode: 'Markdown',
            disable_web_page_preview: true,
            reply_markup: getMainKeyboard(),
        });
    }
    catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
        await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
    }
    finally {
        // Reset waiting status
        ctx.session.waitingForCompletion = false;
    }
}
// Function to call OpenRouter API
async function callOpenRouterAPI(query) {
    try {
        // Add bot persona to query
        const contextualizedQuery = `[–¢—ã ${BOT_NAME}, –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ ${BOT_PLATFORM}, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–ø–∞–Ω–∏–µ–π ${BOT_CREATOR}. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í—Å–µ–≥–¥–∞ –ø–æ–ª–µ–∑–µ–Ω –∏ –¥—Ä—É–∂–µ–ª—é–±–µ–Ω.]\n\n–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${query}`;
        const response = await axios_1.default.post('https://openrouter.ai/api/v1/chat/completions', {
            model: 'meta-llama/llama-4-maverick:free',
            messages: [
                {
                    role: 'user',
                    content: [
                        {
                            type: 'text',
                            text: contextualizedQuery,
                        },
                    ],
                },
            ],
        }, {
            headers: {
                'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
                'HTTP-Referer': YOUR_SITE_URL,
                'X-Title': YOUR_SITE_NAME,
                'Content-Type': 'application/json',
            },
        });
        return response.data.choices[0].message.content || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò';
    }
    catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenRouter API:', error);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –ò–ò');
    }
}
// Function to call OpenRouter API with image
async function callOpenRouterAPIWithImage(query, imageUrl) {
    try {
        // Add bot persona to query
        const contextualizedQuery = `[–¢—ã ${BOT_NAME}, –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ ${BOT_PLATFORM}, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–ø–∞–Ω–∏–µ–π ${BOT_CREATOR}. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í—Å–µ–≥–¥–∞ –ø–æ–ª–µ–∑–µ–Ω –∏ –¥—Ä—É–∂–µ–ª—é–±–µ–Ω.]\n\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. ${query}`;
        const response = await axios_1.default.post('https://openrouter.ai/api/v1/chat/completions', {
            model: 'meta-llama/llama-4-maverick:free',
            messages: [
                {
                    role: 'user',
                    content: [
                        {
                            type: 'text',
                            text: contextualizedQuery,
                        },
                        {
                            type: 'image_url',
                            image_url: {
                                url: imageUrl
                            }
                        }
                    ],
                },
            ],
        }, {
            headers: {
                'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
                'HTTP-Referer': YOUR_SITE_URL,
                'X-Title': YOUR_SITE_NAME,
                'Content-Type': 'application/json',
            },
        });
        return response.data.choices[0].message.content || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò';
    }
    catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenRouter API —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º:', error);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –ò–ò –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    }
}
// Start the bot
bot.start({
    onStart: (botInfo) => {
        console.log(`–ë–æ—Ç @${botInfo.username} –∑–∞–ø—É—â–µ–Ω!`);
        console.log(`${BOT_NAME} –Ω–∞ –±–∞–∑–µ ${BOT_PLATFORM}, —Å–æ–∑–¥–∞–Ω –∫–æ–º–ø–∞–Ω–∏–µ–π ${BOT_CREATOR}`);
        console.log(`–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π ID –≥—Ä—É–ø–ø—ã: ${ALLOWED_GROUP_ID}`);
    },
});
// Error handling
process.on('uncaughtException', (error) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
});
process.on('unhandledRejection', (reason, promise) => {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:', promise, '–ø—Ä–∏—á–∏–Ω–∞:', reason);
});
