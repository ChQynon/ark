import { Bot, Context, session, SessionFlavor, Keyboard, InlineKeyboard, webhookCallback } from 'grammy';
import { Message } from 'grammy/types';
import * as dotenv from 'dotenv';
import axios from 'axios';
import express from 'express';
import { BotInfo } from 'grammy/out/types';

dotenv.config();

// Message history interface
interface ChatMessage {
  role: 'user' | 'assistant';
  content: string;
  timestamp: number;
}

// Session interface
interface SessionData {
  waitingForCompletion: boolean;
  chatHistory: ChatMessage[];
}

type MyContext = Context & SessionFlavor<SessionData>;

// Bot configuration
const ALLOWED_GROUP_ID = -1002567822254;
const BOT_NAME = "ARK-1";
const BOT_PLATFORM = "PLEXY";
const BOT_CREATOR = "@samgay_nis";
const MAX_HISTORY_LENGTH = 10; // Maximum number of messages to keep in history

// Bot introduction message
const BOT_INTRO = `üëã –ü—Ä–∏–≤–µ—Ç! –Ø ${BOT_NAME}, –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ ${BOT_PLATFORM}.
–°–æ–∑–¥–∞–Ω –∫–æ–º–ø–∞–Ω–∏–µ–π ${BOT_CREATOR}.
–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.`;

// Check if environment variables are set
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;
const YOUR_SITE_URL = process.env.YOUR_SITE_URL || 'https://tgaibot.example.com';
const YOUR_SITE_NAME = process.env.YOUR_SITE_NAME || 'TelegramAIBot';
const IS_VERCEL = process.env.VERCEL === '1';
const PORT = process.env.PORT ? parseInt(process.env.PORT) : 3000;
const WEBHOOK_URL = process.env.WEBHOOK_URL || '';

if (!TELEGRAM_BOT_TOKEN || !OPENROUTER_API_KEY) {
  console.error('–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENROUTER_API_KEY –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ —Ñ–∞–π–ª–µ .env');
  process.exit(1);
}

// Initialize the bot
const bot = new Bot<MyContext>(TELEGRAM_BOT_TOKEN);

// Configure sessions
bot.use(session({
  initial: (): SessionData => ({
    waitingForCompletion: false,
    chatHistory: [],
  }),
}));

// Check if message is from allowed group
function isAllowedGroup(ctx: MyContext): boolean {
  // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ —á–∞—Ç—ã, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
  return true;
  // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –Ω–∏–∂–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–∞–º
  // return ctx.chat?.type === "private" || ctx.chat?.id === ALLOWED_GROUP_ID;
}

// Add message to chat history
function addToHistory(ctx: MyContext, role: 'user' | 'assistant', content: string): void {
  if (!ctx.session.chatHistory) {
    ctx.session.chatHistory = [];
  }
  
  ctx.session.chatHistory.push({
    role,
    content,
    timestamp: Date.now()
  });
  
  // Keep history within limits
  if (ctx.session.chatHistory.length > MAX_HISTORY_LENGTH) {
    ctx.session.chatHistory = ctx.session.chatHistory.slice(-MAX_HISTORY_LENGTH);
  }
}

// Create main keyboard
function getMainKeyboard(): Keyboard {
  return new Keyboard()
    .text("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    .text("üì∏ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    .row()
    .text("‚ÑπÔ∏è –û –±–æ—Ç–µ")
    .text("üìö –ü–æ–º–æ—â—å")
    .row()
    .text("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
    .resized();
}

// Handle start command
bot.command("start", async (ctx: MyContext) => {
  if (!isAllowedGroup(ctx)) return;
  
  await ctx.reply(BOT_INTRO, {
    reply_markup: getMainKeyboard(),
  });
});

// Handle help command
bot.command("help", async (ctx: MyContext) => {
  if (!isAllowedGroup(ctx)) return;
  
  const helpText = `üìö *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º ${BOT_NAME}*:

1Ô∏è‚É£ *–ü—Ä—è–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è*: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å
2Ô∏è‚É£ *–ö–æ–º–∞–Ω–¥–∞ –≤ —á–∞—Ç–µ*: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /ai + –≤–∞—à –≤–æ–ø—Ä–æ—Å
3Ô∏è‚É£ *–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ*: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–º
4Ô∏è‚É£ *–ö–Ω–æ–ø–∫–∏*: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
5Ô∏è‚É£ *–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞*: —è –∑–∞–ø–æ–º–∏–Ω–∞—é –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ—Ç–≤–µ—á–∞—é —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

–°–æ–∑–¥–∞–Ω–æ –∫–æ–º–ø–∞–Ω–∏–µ–π ${BOT_CREATOR} –Ω–∞ –±–∞–∑–µ ${BOT_PLATFORM}.`;

  await ctx.reply(helpText, {
    parse_mode: "Markdown",
    reply_markup: getMainKeyboard(),
  });
});

// Handle about command
bot.command("about", async (ctx: MyContext) => {
  if (!isAllowedGroup(ctx)) return;
  
  await ctx.reply(`‚ÑπÔ∏è *–û –±–æ—Ç–µ*\n\n–Ø ${BOT_NAME}, –ø–µ—Ä–µ–¥–æ–≤–æ–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –Ω–∞ –±–∞–∑–µ ${BOT_PLATFORM}.\n–°–æ–∑–¥–∞–Ω –∫–æ–º–ø–∞–Ω–∏–µ–π ${BOT_CREATOR}.\n\n–í–µ—Ä—Å–∏—è: 1.0.0`, {
    parse_mode: "Markdown",
    reply_markup: getMainKeyboard(),
  });
});

// Handle keyboard button presses
bot.hears("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", async (ctx: MyContext) => {
  if (!isAllowedGroup(ctx)) return;
  
  await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:", {
    reply_markup: { remove_keyboard: true },
  });
});

bot.hears("üì∏ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", async (ctx: MyContext) => {
  if (!isAllowedGroup(ctx)) return;
  
  await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", {
    reply_markup: { remove_keyboard: true },
  });
});

bot.hears("‚ÑπÔ∏è –û –±–æ—Ç–µ", async (ctx: MyContext) => {
  if (!isAllowedGroup(ctx)) return;
  
  await ctx.reply(`‚ÑπÔ∏è *–û –±–æ—Ç–µ*\n\n–Ø ${BOT_NAME}, –ø–µ—Ä–µ–¥–æ–≤–æ–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –Ω–∞ –±–∞–∑–µ ${BOT_PLATFORM}.\n–°–æ–∑–¥–∞–Ω –∫–æ–º–ø–∞–Ω–∏–µ–π ${BOT_CREATOR}.\n\n–í–µ—Ä—Å–∏—è: 1.0.0`, {
    parse_mode: "Markdown",
    reply_markup: getMainKeyboard(),
  });
});

bot.hears("üìö –ü–æ–º–æ—â—å", async (ctx: MyContext) => {
  if (!isAllowedGroup(ctx)) return;
  
  const helpText = `üìö *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º ${BOT_NAME}*:

1Ô∏è‚É£ *–ü—Ä—è–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è*: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å
2Ô∏è‚É£ *–ö–æ–º–∞–Ω–¥–∞ –≤ —á–∞—Ç–µ*: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /ai + –≤–∞—à –≤–æ–ø—Ä–æ—Å
3Ô∏è‚É£ *–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ*: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–º
4Ô∏è‚É£ *–ö–Ω–æ–ø–∫–∏*: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
5Ô∏è‚É£ *–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞*: —è –∑–∞–ø–æ–º–∏–Ω–∞—é –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ—Ç–≤–µ—á–∞—é —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

–°–æ–∑–¥–∞–Ω–æ –∫–æ–º–ø–∞–Ω–∏–µ–π ${BOT_CREATOR} –Ω–∞ –±–∞–∑–µ ${BOT_PLATFORM}.`;

  await ctx.reply(helpText, {
    parse_mode: "Markdown",
    reply_markup: getMainKeyboard(),
  });
});

// Clear history button
bot.hears("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", async (ctx: MyContext) => {
  if (!isAllowedGroup(ctx)) return;
  
  ctx.session.chatHistory = [];
  await ctx.reply("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º –æ–±—â–µ–Ω–∏–µ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.", {
    reply_markup: getMainKeyboard(),
  });
});

// Handle direct messages (excluding commands)
bot.on('message:text', async (ctx: MyContext) => {
  console.log('–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', ctx.message?.text?.substring(0, 50));
  
  // Skip if not allowed group
  if (!isAllowedGroup(ctx)) {
    console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ - —á–∞—Ç –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω:', ctx.chat?.id);
    return;
  }
  
  // Skip if it's a command
  if (ctx.message?.text?.startsWith('/')) {
    console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ - —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞');
    return;
  }
  
  // Add user message to history
  if (ctx.message?.text) {
    console.log('–î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é');
    addToHistory(ctx, 'user', ctx.message.text);
  }
  
  // Handle the message
  console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ handleAIRequest');
  await handleAIRequest(ctx, ctx.message?.text || "");
});

// Handle photo messages
bot.on('message:photo', async (ctx: MyContext) => {
  // Skip if not allowed group
  if (!isAllowedGroup(ctx)) return;
  
  try {
    if (ctx.session.waitingForCompletion) {
      await ctx.reply("–Ø –≤—Å–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.");
      return;
    }
    
    // Set waiting status
    ctx.session.waitingForCompletion = true;
    
    // Send typing indicator
    if (ctx.chat) {
      await ctx.api.sendChatAction(ctx.chat.id, "typing");
    }
    
    // Get photo details
    const photoInfo = ctx.message?.photo;
    if (!photoInfo) {
      await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ.");
      ctx.session.waitingForCompletion = false;
      return;
    }
    
    const fileId = photoInfo[photoInfo.length - 1].file_id; // Get highest quality image
    
    // Get file path
    const fileInfo = await ctx.api.getFile(fileId);
    const filePath = fileInfo.file_path;
    
    // Form full photo URL
    const photoUrl = `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${filePath}`;
    
    // Get caption if any, or use default
    const caption = ctx.message?.caption || "–û–ø–∏—à–∏, —á—Ç–æ –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏";
    
    // Add user message to history
    addToHistory(ctx, 'user', `[–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º: ${caption}]`);
    
    // Notify user that we're processing
    const statusMsg = await ctx.reply("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...");
    
    // Call OpenRouter API with the image
    const response = await callOpenRouterAPIWithImage(ctx, caption, photoUrl);
    
    // Add bot response to history
    addToHistory(ctx, 'assistant', response);
    
    // Delete the status message
    if (ctx.chat) {
      await ctx.api.deleteMessage(ctx.chat.id, statusMsg.message_id);
    }
    
    // Build inline keyboard for more actions
    const inlineKeyboard = new InlineKeyboard()
      .text("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", "more_details")
      .text("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏", "translate");
    
    // Send the AI response
    await ctx.reply(response, {
      parse_mode: 'Markdown',
      disable_web_page_preview: true,
      reply_markup: inlineKeyboard,
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
  } finally {
    // Reset waiting status
    ctx.session.waitingForCompletion = false;
    
    // Always show main keyboard after processing
    await ctx.reply("–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", {
      reply_markup: getMainKeyboard(),
    });
  }
});

// Handle inline keyboard callbacks
bot.callbackQuery("more_details", async (ctx: MyContext) => {
  if (!isAllowedGroup(ctx)) return;
  
  if (ctx.callbackQuery) {
    await ctx.answerCallbackQuery("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...");
  }
  
  await ctx.reply("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...");
  
  // Get the message that was replied to (which contains the image)
  const messageWithImage = ctx.callbackQuery?.message?.reply_to_message;
  if (messageWithImage && 'photo' in messageWithImage) {
    // Process with a different prompt for more details
    await handleAIRequest(ctx, "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è –º–µ–ª—å—á–∞–π—à–∏–µ –¥–µ—Ç–∞–ª–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç");
  } else {
    await ctx.reply("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.");
  }
});

bot.callbackQuery("translate", async (ctx: MyContext) => {
  if (!isAllowedGroup(ctx)) return;
  
  if (ctx.callbackQuery) {
    await ctx.answerCallbackQuery("–ü–µ—Ä–µ–≤–æ–¥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...");
  }
  
  await ctx.reply("–ü–µ—Ä–µ–≤–æ–∂—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫...");
  
  const messageWithImage = ctx.callbackQuery?.message?.reply_to_message;
  if (messageWithImage && 'photo' in messageWithImage) {
    // Process with translation prompt
    await handleAIRequest(ctx, "–ü–µ—Ä–µ–≤–µ–¥–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫");
  } else {
    await ctx.reply("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.");
  }
});

// Handle /ai command in groups and direct messages
bot.command('ai', async (ctx: MyContext) => {
  // Skip if not allowed group
  if (!isAllowedGroup(ctx)) return;
  
  const queryText = ctx.match;
  
  if (!queryText) {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ai. –ù–∞–ø—Ä–∏–º–µ—Ä: /ai –ö–∞–∫–∞—è —Å—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?');
    return;
  }
  
  // Add user message to history
  const query = String(queryText);
  addToHistory(ctx, 'user', query);
  
  await handleAIRequest(ctx, query);
});

// Handler for AI requests
async function handleAIRequest(ctx: MyContext, query: string) {
  console.log('handleAIRequest –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É, –∑–∞–ø—Ä–æ—Å:', query.substring(0, 50));
  
  if (ctx.session.waitingForCompletion) {
    console.log('–ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞');
    await ctx.reply("–Ø –≤—Å–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.");
    return;
  }
  
  if (!query.trim()) {
    console.log('–ó–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π');
    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞.");
    return;
  }
  
  try {
    // Set waiting status
    ctx.session.waitingForCompletion = true;
    console.log('–°—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    
    // Send typing indicator
    if (ctx.chat) {
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞');
      await ctx.api.sendChatAction(ctx.chat.id, "typing");
    }
    
    // Notify user that we're processing
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    const statusMsg = await ctx.reply("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...");
    
    // Call OpenRouter API
    console.log('–í—ã–∑—ã–≤–∞–µ–º OpenRouter API');
    const response = await callOpenRouterAPI(ctx, query);
    console.log('–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç OpenRouter API:', response.substring(0, 50));
    
    // Add bot response to history
    console.log('–î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é');
    addToHistory(ctx, 'assistant', response);
    
    // Delete the status message
    if (ctx.chat) {
      console.log('–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      await ctx.api.deleteMessage(ctx.chat.id, statusMsg.message_id);
    }
    
    // Send the AI response
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
    await ctx.reply(response, {
      parse_mode: 'Markdown',
      disable_web_page_preview: true,
      reply_markup: getMainKeyboard(),
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
    await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
  } finally {
    // Reset waiting status
    console.log('–°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è');
    ctx.session.waitingForCompletion = false;
  }
}

// Convert session history to OpenRouter format
function formatHistoryForAPI(ctx: MyContext): Array<{role: string, content: Array<{type: string, text: string}>}> {
  if (!ctx.session.chatHistory || ctx.session.chatHistory.length === 0) {
    return [];
  }
  
  return ctx.session.chatHistory.map(msg => ({
    role: msg.role === 'user' ? 'user' : 'assistant',
    content: [
      {
        type: 'text',
        text: msg.content
      }
    ]
  }));
}

// Function to call OpenRouter API
async function callOpenRouterAPI(ctx: MyContext, query: string): Promise<string> {
  try {
    // Format conversation history for the API
    const messageHistory = formatHistoryForAPI(ctx);
    
    // Add system message at the beginning of the conversation
    const messages = [
      {
        role: 'system',
        content: [
          {
            type: 'text',
            text: `–¢—ã ${BOT_NAME}, –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ ${BOT_PLATFORM}, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–ø–∞–Ω–∏–µ–π ${BOT_CREATOR}. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í—Å–µ–≥–¥–∞ –ø–æ–ª–µ–∑–µ–Ω –∏ –¥—Ä—É–∂–µ–ª—é–±–µ–Ω. –ü–æ–º–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ.`
          }
        ]
      },
      ...messageHistory
    ];
    
    // If the last message was not the user's query, add it
    if (messageHistory.length === 0 || messageHistory[messageHistory.length - 1].role !== 'user') {
      messages.push({
        role: 'user',
        content: [
          {
            type: 'text',
            text: query
          }
        ]
      });
    }
    
    const response = await axios.post(
      'https://openrouter.ai/api/v1/chat/completions',
      {
        model: 'meta-llama/llama-4-maverick:free',
        messages: messages,
      },
      {
        headers: {
          'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
          'HTTP-Referer': YOUR_SITE_URL,
          'X-Title': YOUR_SITE_NAME,
          'Content-Type': 'application/json',
        },
      }
    );

    return response.data.choices[0].message.content || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenRouter API:', error);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –ò–ò');
  }
}

// Function to call OpenRouter API with image
async function callOpenRouterAPIWithImage(ctx: MyContext, query: string, imageUrl: string): Promise<string> {
  try {
    // Format conversation history for the API
    const messageHistory = formatHistoryForAPI(ctx);
    
    // Add system message at the beginning of the conversation
    const messages = [
      {
        role: 'system',
        content: [
          {
            type: 'text',
            text: `–¢—ã ${BOT_NAME}, –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ ${BOT_PLATFORM}, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–ø–∞–Ω–∏–µ–π ${BOT_CREATOR}. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í—Å–µ–≥–¥–∞ –ø–æ–ª–µ–∑–µ–Ω –∏ –¥—Ä—É–∂–µ–ª—é–±–µ–Ω. –ü–æ–º–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ.`
          }
        ]
      },
      ...messageHistory
    ];
    
    // Add current query with image
    messages.push({
      role: 'user',
      content: [
        {
          type: 'text',
          text: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. ${query}`
        },
        {
          type: 'image_url',
          image_url: {
            url: imageUrl
          }
        }
      ]
    });
    
    const response = await axios.post(
      'https://openrouter.ai/api/v1/chat/completions',
      {
        model: 'meta-llama/llama-4-maverick:free',
        messages: messages,
      },
      {
        headers: {
          'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
          'HTTP-Referer': YOUR_SITE_URL,
          'X-Title': YOUR_SITE_NAME,
          'Content-Type': 'application/json',
        },
      }
    );

    return response.data.choices[0].message.content || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenRouter API —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º:', error);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –ò–ò –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
  }
}

// Webhook or polling setup based on environment
if (IS_VERCEL && WEBHOOK_URL) {
  // Use webhook mode for Vercel
  const app = express();
  app.use(express.json());
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ —Å –±–æ–ª–µ–µ –æ–±—â–∏–º –º–∞—Ä—à—Ä—É—Ç–æ–º
  app.use('/api/webhook', (req, res, next) => {
    console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –≤–µ–±—Ö—É–∫–∞:', req.method, req.url);
    return webhookCallback(bot, 'express')(req, res, next);
  });

  // –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω
  app.post('/api/webhook', (req, res) => {
    console.log('–ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ /api/webhook');
    res.status(200).json({ ok: true, message: 'Webhook received' });
  });

  // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä—É—á–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–µ–±—Ö—É–∫–∞ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä
  app.get('/api/setwebhook', async (req, res) => {
    try {
      const result = await bot.api.setWebhook(WEBHOOK_URL);
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞:', result);
      res.status(200).json({ ok: true, result });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞:', error);
      res.status(500).json({ ok: false, error: String(error) });
    }
  });
  
  // Health check endpoint
  app.get('/api/health', (req, res) => {
    res.status(200).json({ 
      status: 'ok', 
      bot: BOT_NAME,
      platform: BOT_PLATFORM,
      webhook: WEBHOOK_URL || 'not set'
    });
  });

  // Catch-all –º–∞—Ä—à—Ä—É—Ç
  app.get('/*', (req, res) => {
    res.status(200).json({ 
      message: `${BOT_NAME} –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!`,
      endpoints: [
        "/api/webhook - Telegram webhook endpoint",
        "/api/health - Health check",
        "/api/setwebhook - Manually set webhook URL"
      ]
    });
  });
  
  // Start Express server
  app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`${BOT_NAME} –Ω–∞ –±–∞–∑–µ ${BOT_PLATFORM}, —Å–æ–∑–¥–∞–Ω –∫–æ–º–ø–∞–Ω–∏–µ–π ${BOT_CREATOR}`);
    console.log(`–†–µ–∂–∏–º –≤–µ–±—Ö—É–∫–æ–≤ –¥–ª—è Vercel –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
    console.log(`WEBHOOK_URL: ${WEBHOOK_URL}`);
    
    // Set webhook
    if (WEBHOOK_URL) {
      bot.api.setWebhook(WEBHOOK_URL)
        .then(() => console.log(`–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${WEBHOOK_URL}`))
        .catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞:', e));
    }
  });
} else {
  // Use long polling for local development
  bot.start({
    onStart: (botInfo: BotInfo) => {
      console.log(`–ë–æ—Ç @${botInfo.username} –∑–∞–ø—É—â–µ–Ω!`);
      console.log(`${BOT_NAME} –Ω–∞ –±–∞–∑–µ ${BOT_PLATFORM}, —Å–æ–∑–¥–∞–Ω –∫–æ–º–ø–∞–Ω–∏–µ–π ${BOT_CREATOR}`);
      console.log(`–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π ID –≥—Ä—É–ø–ø—ã: ${ALLOWED_GROUP_ID}`);
    },
  });
}

// Error handling
process.on('uncaughtException', (error: Error) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
});

process.on('unhandledRejection', (reason: any, promise: Promise<any>) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:', promise, '–ø—Ä–∏—á–∏–Ω–∞:', reason);
}); 