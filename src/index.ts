import { Bot, Context, session, SessionFlavor, Keyboard, InlineKeyboard } from 'grammy';
import { Message } from 'grammy/types';
import * as dotenv from 'dotenv';
import axios from 'axios';

dotenv.config();

// –¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è OpenRouter API
type Role = 'user' | 'assistant' | 'system';

// –ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
interface TextContent {
  type: 'text';
  text: string;
}

interface ImageContent {
  type: 'image_url';
  image_url: {
    url: string;
  };
}

type MessageContent = TextContent | ImageContent;

// –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è API
interface ApiMessage {
  role: Role;
  content: string | MessageContent[];
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è —Å –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–æ–≤ –∏ –∫–µ—à–µ–º
interface SessionData {
  waitingForCompletion: boolean;
  chatHistory: ApiMessage[];
  // –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  processedMessageIds: Set<number>;
  lastMessageText?: string; 
  lastMessageTime?: number;
  lastUpdateId?: number;
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –±–æ—Ç–∞
type MyContext = Context & SessionFlavor<SessionData>;

// Bot configuration
const ALLOWED_GROUP_ID = -1002567822254;
const BOT_NAME = "ARK-1";
const BOT_PLATFORM = "PLEXY";
const BOT_CREATOR = "@samgay_nis";

// Bot introduction message
const BOT_INTRO = `üëã –ü—Ä–∏–≤–µ—Ç! –Ø ${BOT_NAME}, –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ ${BOT_PLATFORM}.
–°–æ–∑–¥–∞–Ω –∫–æ–º–ø–∞–Ω–∏–µ–π ${BOT_CREATOR}.
–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.`;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞ (Vercel/–ª–æ–∫–∞–ª—å–Ω—ã–π)
const IS_VERCEL = process.env.VERCEL === "1";
const WEBHOOK_URL = process.env.WEBHOOK_URL;

// Check if environment variables are set
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;
const YOUR_SITE_URL = process.env.YOUR_SITE_URL || 'https://tgaibot.example.com';
const YOUR_SITE_NAME = process.env.YOUR_SITE_NAME || 'TelegramAIBot';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
const processedUpdates = new Set<number>();
// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
const processedMessages = new Map<string, number>();

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
const API_TIMEOUT_TEXT = 20000; // 20 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
const API_TIMEOUT_IMAGE = 30000; // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const MAX_HISTORY_MESSAGES = 3; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
const DUPLICATE_MESSAGE_TIMEOUT = 10000; // 10 —Å–µ–∫—É–Ω–¥ –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π

if (!TELEGRAM_BOT_TOKEN || !OPENROUTER_API_KEY) {
  console.error('–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENROUTER_API_KEY –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ —Ñ–∞–π–ª–µ .env');
  process.exit(1);
}

// Initialize the bot
const bot = new Bot<MyContext>(TELEGRAM_BOT_TOKEN);

// Configure sessions
bot.use(session({
  initial: (): SessionData => ({
    waitingForCompletion: false,
    chatHistory: [],
    processedMessageIds: new Set()
  }),
}));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
function isDuplicateMessage(chatId: number, userId: number, text: string): boolean {
  const now = Date.now();
  const key = `${chatId}:${userId}:${text}`;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ
  const lastTime = processedMessages.get(key);
  if (lastTime && now - lastTime < DUPLICATE_MESSAGE_TIMEOUT) {
    return true;
  }
  
  // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
  processedMessages.set(key, now);
  
  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
  if (processedMessages.size > 1000) {
    const keysToDelete: string[] = [];
    for (const [storedKey, timestamp] of processedMessages.entries()) {
      if (now - timestamp > DUPLICATE_MESSAGE_TIMEOUT) {
        keysToDelete.push(storedKey);
      }
      if (keysToDelete.length > 500) break;
    }
    
    for (const key of keysToDelete) {
      processedMessages.delete(key);
    }
  }
  
  return false;
}

// Middleware –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
bot.use(async (ctx, next) => {
  try {
    // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ ID
    if (ctx.update.update_id) {
      if (processedUpdates.has(ctx.update.update_id)) {
        console.log(`–ü—Ä–æ–ø—É—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ID: ${ctx.update.update_id}`);
        return;
      }
      
      processedUpdates.add(ctx.update.update_id);
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞
      if (processedUpdates.size > 1000) {
        const iter = processedUpdates.values();
        processedUpdates.delete(iter.next().value);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (ctx.message?.text && ctx.chat?.id && ctx.from?.id) {
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      if (isDuplicateMessage(ctx.chat.id, ctx.from.id, ctx.message.text)) {
        console.log(`–ü—Ä–æ–ø—É—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${ctx.message.text.substring(0, 20)}...`);
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Å–µ—Å—Å–∏–∏
      if (ctx.session.lastMessageText === ctx.message.text &&
          ctx.session.lastMessageTime &&
          Date.now() - ctx.session.lastMessageTime < DUPLICATE_MESSAGE_TIMEOUT) {
        console.log(`–ü—Ä–æ–ø—É—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–µ—Å—Å–∏–∏: ${ctx.message.text.substring(0, 20)}...`);
        return;
      }
      
      // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      ctx.session.lastMessageText = ctx.message.text;
      ctx.session.lastMessageTime = Date.now();
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è
    if (ctx.message?.message_id) {
      if (ctx.session.processedMessageIds.has(ctx.message.message_id)) {
        console.log(`–ü—Ä–æ–ø—É—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ID: ${ctx.message.message_id}`);
        return;
      }
      
      ctx.session.processedMessageIds.add(ctx.message.message_id);
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞ —Å–µ—Å—Å–∏–∏
      if (ctx.session.processedMessageIds.size > 100) {
        const iter = ctx.session.processedMessageIds.values();
        ctx.session.processedMessageIds.delete(iter.next().value);
      }
    }
    
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    await next();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ middleware –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏:', error);
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    await next();
  }
});

// Check if message is from allowed group
function isAllowedGroup(ctx: MyContext): boolean {
  return ctx.chat?.type === "private" || ctx.chat?.id === ALLOWED_GROUP_ID;
}

// Create main keyboard
function getMainKeyboard(): Keyboard {
  return new Keyboard()
    .text("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    .text("üì∏ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    .row()
    .text("‚ÑπÔ∏è –û –±–æ—Ç–µ")
    .text("üìö –ü–æ–º–æ—â—å")
    .row()
    .text("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
    .resized();
}

// Handle start command
bot.command("start", async (ctx: MyContext) => {
  if (!isAllowedGroup(ctx)) return;
  
  try {
    // Reset history on start
    ctx.session.chatHistory = [];
    
    await ctx.reply(BOT_INTRO, {
      reply_markup: getMainKeyboard(),
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start:', error);
  }
});

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏
bot.command(["help", "about", "clear"], async (ctx: MyContext) => {
  if (!isAllowedGroup(ctx)) return;
  
  try {
    const command = ctx.message?.text?.split(' ')[0].substring(1);
    
    switch (command) {
      case 'help':
        const helpText = `üìö *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º ${BOT_NAME}*:

1Ô∏è‚É£ *–ü—Ä—è–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è*: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å
2Ô∏è‚É£ *–ö–æ–º–∞–Ω–¥–∞ –≤ —á–∞—Ç–µ*: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /ai + –≤–∞—à –≤–æ–ø—Ä–æ—Å
3Ô∏è‚É£ *–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ*: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–º
4Ô∏è‚É£ *–ö–Ω–æ–ø–∫–∏*: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
5Ô∏è‚É£ *–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤*: —è –∑–∞–ø–æ–º–∏–Ω–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –µ–≥–æ –Ω–∞–∂–∞–≤ "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"

–°–æ–∑–¥–∞–Ω–æ –∫–æ–º–ø–∞–Ω–∏–µ–π ${BOT_CREATOR} –Ω–∞ –±–∞–∑–µ ${BOT_PLATFORM}.`;
        await ctx.reply(helpText, {
          parse_mode: "Markdown",
          reply_markup: getMainKeyboard(),
        });
        break;
        
      case 'about':
        await ctx.reply(`‚ÑπÔ∏è *–û –±–æ—Ç–µ*\n\n–Ø ${BOT_NAME}, –ø–µ—Ä–µ–¥–æ–≤–æ–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –Ω–∞ –±–∞–∑–µ ${BOT_PLATFORM}.\n–°–æ–∑–¥–∞–Ω –∫–æ–º–ø–∞–Ω–∏–µ–π ${BOT_CREATOR}.\n\n–í–µ—Ä—Å–∏—è: 1.0.0`, {
          parse_mode: "Markdown",
          reply_markup: getMainKeyboard(),
        });
        break;
        
      case 'clear':
        ctx.session.chatHistory = [];
        await ctx.reply("üßπ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞! –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä –∑–∞–Ω–æ–≤–æ.", {
          reply_markup: getMainKeyboard(),
        });
        break;
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã:`, error);
  }
});

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
bot.hears(["‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "üì∏ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "‚ÑπÔ∏è –û –±–æ—Ç–µ", "üìö –ü–æ–º–æ—â—å", "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"], async (ctx) => {
  if (!isAllowedGroup(ctx)) return;
  
  try {
    const text = ctx.message?.text;
    
    switch (text) {
      case "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:", {
          reply_markup: { remove_keyboard: true },
        });
        break;
        
      case "üì∏ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è":
        await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", {
          reply_markup: { remove_keyboard: true },
        });
        break;
        
      case "‚ÑπÔ∏è –û –±–æ—Ç–µ":
        await ctx.reply(`‚ÑπÔ∏è *–û –±–æ—Ç–µ*\n\n–Ø ${BOT_NAME}, –ø–µ—Ä–µ–¥–æ–≤–æ–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –Ω–∞ –±–∞–∑–µ ${BOT_PLATFORM}.\n–°–æ–∑–¥–∞–Ω –∫–æ–º–ø–∞–Ω–∏–µ–π ${BOT_CREATOR}.\n\n–í–µ—Ä—Å–∏—è: 1.0.0`, {
          parse_mode: "Markdown",
          reply_markup: getMainKeyboard(),
        });
        break;
        
      case "üìö –ü–æ–º–æ—â—å":
        const helpText = `üìö *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º ${BOT_NAME}*:

1Ô∏è‚É£ *–ü—Ä—è–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è*: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å
2Ô∏è‚É£ *–ö–æ–º–∞–Ω–¥–∞ –≤ —á–∞—Ç–µ*: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /ai + –≤–∞—à –≤–æ–ø—Ä–æ—Å
3Ô∏è‚É£ *–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ*: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–º
4Ô∏è‚É£ *–ö–Ω–æ–ø–∫–∏*: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
5Ô∏è‚É£ *–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤*: —è –∑–∞–ø–æ–º–∏–Ω–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –µ–≥–æ –Ω–∞–∂–∞–≤ "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"

–°–æ–∑–¥–∞–Ω–æ –∫–æ–º–ø–∞–Ω–∏–µ–π ${BOT_CREATOR} –Ω–∞ –±–∞–∑–µ ${BOT_PLATFORM}.`;
        await ctx.reply(helpText, {
          parse_mode: "Markdown",
          reply_markup: getMainKeyboard(),
        });
        break;
        
      case "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é":
        ctx.session.chatHistory = [];
        await ctx.reply("üßπ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞! –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä –∑–∞–Ω–æ–≤–æ.", {
          reply_markup: getMainKeyboard(),
        });
        break;
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏:`, error);
  }
});

// Handle text messages
bot.on('message:text', async (ctx: MyContext) => {
  try {
    // Skip if not allowed group or is a command
    if (!isAllowedGroup(ctx)) return;
    if (ctx.message?.text?.startsWith('/') && ctx.message.text !== '/start') return;
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏
    const text = ctx.message?.text;
    if (!text || text.startsWith('/')) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    if (text === "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å" || 
        text === "üì∏ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" || 
        text === "‚ÑπÔ∏è –û –±–æ—Ç–µ" || 
        text === "üìö –ü–æ–º–æ—â—å" || 
        text === "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é") {
      return;
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${text.substring(0, 30)}...`);
    
    // –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ–±—ã –æ–Ω –≤–∏–¥–µ–ª, —á—Ç–æ –±–æ—Ç –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
    const statusMsg = await ctx.reply("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...");
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
    processAIRequest(ctx, text, statusMsg.message_id).catch(error => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
});

// Handle photo messages
bot.on('message:photo', async (ctx: MyContext) => {
  try {
    // Skip if not allowed group
    if (!isAllowedGroup(ctx)) return;
    
    // –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ–±—ã –æ–Ω –≤–∏–¥–µ–ª, —á—Ç–æ –±–æ—Ç –ø–æ–ª—É—á–∏–ª —Ñ–æ—Ç–æ
    const statusMsg = await ctx.reply("üì∏ –ü–æ–ª—É—á–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...");
    
    // Get photo details
    if (!ctx.message?.photo) {
      throw new Error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏");
    }
    
    const photoInfo = ctx.message.photo;
    const fileId = photoInfo[photoInfo.length - 1].file_id; // Get highest quality image
    
    // Get file path
    const fileInfo = await ctx.api.getFile(fileId);
    if (!fileInfo.file_path) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è");
    }
    
    const filePath = fileInfo.file_path;
    
    // Form full photo URL
    const photoUrl = `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${filePath}`;
    
    // Get caption if any, or use default
    const caption = ctx.message.caption || "–û–ø–∏—à–∏, —á—Ç–æ –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏";
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
    processImageRequest(ctx, caption, photoUrl, statusMsg.message_id).catch(error => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
  }
});

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
async function processImageRequest(ctx: MyContext, caption: string, photoUrl: string, statusMsgId: number) {
  try {
    // –ü–æ–º–µ—Ç–∫–∞, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å
    ctx.session.waitingForCompletion = true;
    
    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    if (ctx.chat) {
      await ctx.api.sendChatAction(ctx.chat.id, "typing");
    }
    
    // Save user query to history
    ctx.session.chatHistory.push({
      role: 'user',
      content: `[–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ] ${caption}`
    });
    
    // Call OpenRouter API with the image
    const response = await callOpenRouterAPIWithImage(ctx.session.chatHistory, caption, photoUrl);
    
    // Save response to history
    ctx.session.chatHistory.push({
      role: 'assistant',
      content: response
    });
    
    // Delete the status message
    if (ctx.chat) {
      try {
        await ctx.api.deleteMessage(ctx.chat.id, statusMsgId);
      } catch (error) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', error);
      }
    }
    
    // Build inline keyboard for more actions
    const inlineKeyboard = new InlineKeyboard()
      .text("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", "more_details")
      .text("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏", "translate");
    
    // Send the AI response
    await ctx.reply(response, {
      parse_mode: 'Markdown',
      reply_markup: inlineKeyboard,
    });
    
    // Show main keyboard after processing
    await ctx.reply("–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", {
      reply_markup: getMainKeyboard(),
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.', {
      reply_markup: getMainKeyboard(),
    });
  } finally {
    // Reset waiting status
    ctx.session.waitingForCompletion = false;
  }
}

// Handle inline keyboard callbacks
bot.callbackQuery(["more_details", "translate"], async (ctx: MyContext) => {
  try {
    if (!isAllowedGroup(ctx)) return;
    
    if (ctx.callbackQuery && 'message' in ctx.callbackQuery) {
      // –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–±–µ–∫–∞
      await ctx.answerCallbackQuery();
      
      const statusMsg = await ctx.reply("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...");
      
      // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–ª–±–µ–∫–∞
      let prompt = "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é";
      if (ctx.callbackQuery.data === "more_details") {
        prompt = "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è –º–µ–ª—å—á–∞–π—à–∏–µ –¥–µ—Ç–∞–ª–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç";
      } else if (ctx.callbackQuery.data === "translate") {
        prompt = "–ü–µ—Ä–µ–≤–µ–¥–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫";
      }
      
      // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
      processAIRequest(ctx, prompt, statusMsg.message_id).catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–±–µ–∫–∞:', error);
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–±–µ–∫–∞:', error);
  }
});

// Handle /ai command
bot.command('ai', async (ctx: MyContext) => {
  try {
    // Skip if not allowed group
    if (!isAllowedGroup(ctx)) return;
    
    const queryText = ctx.match;
    
    if (!queryText || typeof queryText !== 'string') {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ai. –ù–∞–ø—Ä–∏–º–µ—Ä: /ai –ö–∞–∫–∞—è —Å—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?');
      return;
    }
    
    // –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–ø—Ä–æ—Å
    const statusMsg = await ctx.reply("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...");
    
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    processAIRequest(ctx, queryText, statusMsg.message_id).catch(error => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /ai:', error);
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /ai:', error);
  }
});

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
async function processAIRequest(ctx: MyContext, query: string, statusMsgId: number) {
  try {
    // –ü–æ–º–µ—Ç–∫–∞, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å
    ctx.session.waitingForCompletion = true;
    
    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    if (ctx.chat) {
      await ctx.api.sendChatAction(ctx.chat.id, "typing");
    }
    
    // Save user query to history
    ctx.session.chatHistory.push({
      role: 'user',
      content: query
    });
    
    // Call OpenRouter API
    const response = await callOpenRouterAPI(ctx.session.chatHistory);
    
    // Save response to history
    ctx.session.chatHistory.push({
      role: 'assistant',
      content: response
    });
    
    // Delete the status message
    if (ctx.chat) {
      try {
        await ctx.api.deleteMessage(ctx.chat.id, statusMsgId);
      } catch (error) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', error);
      }
    }
    
    // Send the AI response
    await ctx.reply(response, {
      parse_mode: 'Markdown',
      reply_markup: getMainKeyboard(),
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
    await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.', {
      reply_markup: getMainKeyboard(),
    });
  } finally {
    // Reset waiting status
    ctx.session.waitingForCompletion = false;
  }
}

// Function to call OpenRouter API
async function callOpenRouterAPI(chatHistory: SessionData['chatHistory']): Promise<string> {
  try {
    // Prepare the context from chat history
    const messages = prepareMessages(chatHistory);
    
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenRouter API', {
      model: 'meta-llama/llama-4-maverick:free',
      messagesCount: messages.length
    });
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    const timeout = 40000; // 40 —Å–µ–∫—É–Ω–¥
    
    const response = await axios.post(
      'https://openrouter.ai/api/v1/chat/completions',
      {
        model: 'meta-llama/llama-4-maverick:free',
        messages: messages,
        max_tokens: 1000, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
        temperature: 0.7 // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
      },
      {
        headers: {
          'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
          'HTTP-Referer': YOUR_SITE_URL,
          'X-Title': YOUR_SITE_NAME,
          'Content-Type': 'application/json',
        },
        timeout: timeout
      }
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (!response || !response.data) {
      console.error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter API');
      return '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
    }

    if (!response.data.choices || response.data.choices.length === 0) {
      console.error('–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ API:', response.data);
      return '–ò–ò –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
    }

    const content = response.data.choices[0].message?.content;
    
    if (!content) {
      console.error('–ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –æ—Ç–≤–µ—Ç–µ API:', response.data.choices[0]);
      return '–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
    }

    return content;
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenRouter API:', error);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–π–º-–∞—É—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
    if (error.code === 'ECONNABORTED' || (error.message && error.message.includes('timeout'))) {
      return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –∑–∞–ø—Ä–æ—Å –∫ –ò–ò –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å.';
    }
    
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å API
    if (error.response) {
      console.error('–û—à–∏–±–∫–∞ API:', error.response.status, error.response.data);
      return `–°–µ—Ä–≤–∏—Å –ò–ò –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${error.response.status}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`;
    }
    
    return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å—É –ò–ò. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.';
  }
}

// Function to call OpenRouter API with image
async function callOpenRouterAPIWithImage(chatHistory: SessionData['chatHistory'], query: string, imageUrl: string): Promise<string> {
  try {
    // Prepare the context from chat history
    const messages = prepareMessages(chatHistory);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    const imageMessage: ApiMessage = {
      role: 'user',
      content: [
        { type: 'text', text: query },
        { type: 'image_url', image_url: { url: imageUrl } }
      ]
    };
    
    // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    const filteredMessages = messages.filter((msg, idx, arr) => 
      !(msg.role === 'user' && idx === arr.length - 1)
    );
    
    filteredMessages.push(imageMessage);
    
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤ OpenRouter API', {
      model: 'meta-llama/llama-4-maverick:free',
      messagesCount: filteredMessages.length,
      imageUrl: imageUrl.substring(0, 50) + '...' // –£–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–π URL –¥–ª—è –ª–æ–≥–∞
    });
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const timeout = 60000; // 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    
    const response = await axios.post(
      'https://openrouter.ai/api/v1/chat/completions',
      {
        model: 'meta-llama/llama-4-maverick:free',
        messages: filteredMessages,
        max_tokens: 1500, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        temperature: 0.7 // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
      },
      {
        headers: {
          'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
          'HTTP-Referer': YOUR_SITE_URL,
          'X-Title': YOUR_SITE_NAME,
          'Content-Type': 'application/json',
        },
        timeout: timeout
      }
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–æ–ª–µ–µ —Ç—â–∞—Ç–µ–ª—å–Ω–æ
    if (!response || !response.data) {
      console.error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter API –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      return '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –¥—Ä—É–≥–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.';
    }

    if (!response.data.choices || response.data.choices.length === 0) {
      console.error('–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', response.data);
      return '–ò–ò –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.';
    }

    const content = response.data.choices[0].message?.content;
    
    if (!content) {
      console.error('–ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –æ—Ç–≤–µ—Ç–µ API –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', response.data.choices[0]);
      return '–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.';
    }

    return content;
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenRouter API —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º:', error);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–π–º-–∞—É—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
    if (error.code === 'ECONNABORTED' || (error.message && error.message.includes('timeout'))) {
      return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏–ª–∏ —Å –º–µ–Ω–µ–µ —Å–ª–æ–∂–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º.';
    }
    
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å API
    if (error.response) {
      console.error('–û—à–∏–±–∫–∞ API –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error.response.status, error.response.data);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑–º–µ—Ä–∞
      if (error.response.status === 413 || (error.response.data && error.response.data.includes('payload too large'))) {
        return '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.';
      }
      
      return `–°–µ—Ä–≤–∏—Å –ò–ò –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${error.response.status}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`;
    }
    
    return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.';
  }
}

// Prepare messages for API
function prepareMessages(chatHistory: SessionData['chatHistory']): ApiMessage[] {
  // Add system message first
  const systemMessage: ApiMessage = {
    role: 'system',
    content: `–¢—ã ${BOT_NAME}, –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ ${BOT_PLATFORM}, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–ø–∞–Ω–∏–µ–π ${BOT_CREATOR}. 
–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í—Å–µ–≥–¥–∞ –ø–æ–ª–µ–∑–µ–Ω –∏ –¥—Ä—É–∂–µ–ª—é–±–µ–Ω. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.
–£ —Ç–µ–±—è –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
1. –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
2. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
3. –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
4. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞`
  };
  
  // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
  const apiMessages: ApiMessage[] = [systemMessage];
  
  // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
  const recentMessages = chatHistory.slice(-MAX_HISTORY_MESSAGES); // –°–æ–∫—Ä–∞—â–µ–Ω–æ –¥–æ 3 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
  
  for (const msg of recentMessages) {
    apiMessages.push({
      role: msg.role,
      content: msg.content
    });
  }
  
  return apiMessages;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Vercel
async function handleWebhook(req: any, res: any) {
  try {
    // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–ø—Ä–æ—Å
    res.status(200).send('OK');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ update_id
    if (req.body?.update_id && processedUpdates.has(req.body.update_id)) {
      console.log(`–í–µ–±—Ö—É–∫: –ø—Ä–æ–ø—É—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ID: ${req.body.update_id}`);
      return;
    }
    
    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (req.body?.update_id) {
      processedUpdates.add(req.body.update_id);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (!req.body) {
      console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞');
      return;
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (req.body.message?.text && req.body.message?.from?.id && req.body.message?.chat?.id) {
      const chatId = req.body.message.chat.id;
      const userId = req.body.message.from.id;
      const text = req.body.message.text;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É —Ö—Ä–∞–Ω–∏–ª–∏—â—É
      if (isDuplicateMessage(chatId, userId, text)) {
        console.log(`–í–µ–±—Ö—É–∫: –ø—Ä–æ–ø—É—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${text.substring(0, 20)}...`);
        return;
      }
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
    bot.handleUpdate(req.body).catch(error => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞:', error);
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö
if (IS_VERCEL) {
  // Vercel mode: use webhooks
  if (!WEBHOOK_URL) {
    throw new Error("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ–∂–∏–º–∞ Vercel");
  }
  
  console.log(`–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–æ–≤ –Ω–∞ ${WEBHOOK_URL}`);
  
  // –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Vercel API endpoint
  module.exports = async (req: any, res: any) => {
    await handleWebhook(req, res);
  };
} else {
  // Local mode: use long polling
  bot.start({
    onStart: (botInfo) => {
      console.log(`–ë–æ—Ç @${botInfo.username} –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ long polling!`);
      console.log(`${BOT_NAME} –Ω–∞ –±–∞–∑–µ ${BOT_PLATFORM}, —Å–æ–∑–¥–∞–Ω –∫–æ–º–ø–∞–Ω–∏–µ–π ${BOT_CREATOR}`);
      console.log(`–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π ID –≥—Ä—É–ø–ø—ã: ${ALLOWED_GROUP_ID}`);
    },
  });
}

// –†–µ–≥—É–ª—è—Ä–Ω–æ –æ—á–∏—â–∞–µ–º –∫–µ—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
setInterval(() => {
  if (processedUpdates.size > 500) {
    console.log(`–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${processedUpdates.size} -> 100`);
    const toKeep = Array.from(processedUpdates).slice(-100);
    processedUpdates.clear();
    toKeep.forEach(id => processedUpdates.add(id));
  }
  
  // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const now = Date.now();
  const keysToDelete: string[] = [];
  for (const [key, timestamp] of processedMessages.entries()) {
    if (now - timestamp > DUPLICATE_MESSAGE_TIMEOUT) {
      keysToDelete.push(key);
    }
  }
  
  if (keysToDelete.length > 0) {
    console.log(`–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: —É–¥–∞–ª—è–µ–º ${keysToDelete.length} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π`);
    for (const key of keysToDelete) {
      processedMessages.delete(key);
    }
  }
  
}, 60000); // –û—á–∏—â–∞–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

// Error handling
process.on('uncaughtException', (error: Error) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
});

process.on('unhandledRejection', (reason: any, promise: Promise<any>) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:', promise, '–ø—Ä–∏—á–∏–Ω–∞:', reason);
}); 