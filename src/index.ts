import { Bot } from 'grammy';
import * as dotenv from 'dotenv';
import axios from 'axios';

dotenv.config();

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;

if (!TELEGRAM_BOT_TOKEN || !OPENROUTER_API_KEY) {
  console.error('–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENROUTER_API_KEY –Ω–µ —É–∫–∞–∑–∞–Ω—ã');
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Bot(TELEGRAM_BOT_TOKEN);

// –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
bot.use(async (ctx, next) => {
  console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:', ctx.update.update_id, JSON.stringify(ctx.message?.text).substring(0, 30));
  await next();
  console.log('–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω:', ctx.update.update_id);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command("start", async (ctx) => {
  await ctx.reply(`üëã –ü—Ä–∏–≤–µ—Ç! –Ø ARK-1, –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ.`);
  console.log('–ö–æ–º–∞–Ω–¥–∞ start –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –í–°–ï–• —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message:text', async (ctx) => {
  const text = ctx.message.text || '';
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¢–û–õ–¨–ö–û –∫–æ–º–∞–Ω–¥—ã, –Ω–∞ –í–°–Å –æ—Å—Ç–∞–ª—å–Ω–æ–µ –æ—Ç–≤–µ—á–∞–µ–º
  if (text.startsWith('/')) {
    console.log('–ü—Ä–æ–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã:', text);
    return;
  }
  
  console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞:', text.substring(0, 30));
  
  try {
    // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –Ω–∞—á–∏–Ω–∞–µ–º –ø–µ—á–∞—Ç–∞—Ç—å
    await ctx.api.sendChatAction(ctx.chat.id, "typing");
    
    // –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
    const response = await axios.post(
      'https://openrouter.ai/api/v1/chat/completions',
      {
        model: 'meta-llama/llama-4-maverick:free',
        messages: [
          {
            role: 'system',
            content: '–¢—ã ARK-1, –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ —Ç–æ–ª—å–∫–æ –ø–æ –¥–µ–ª—É, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤. –ü–∏—à–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.'
          },
          {
            role: 'user',
            content: text
          }
        ],
        max_tokens: 500
      },
      {
        headers: {
          'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
          'Content-Type': 'application/json',
        },
        timeout: 10000 // –ï—â–µ –º–µ–Ω—å—à–µ —Ç–∞–π–º–∞—É—Ç - 10 —Å–µ–∫—É–Ω–¥
      }
    );
    
    // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const responseText = response.data.choices[0].message.content || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞';
    await ctx.reply(responseText);
    console.log('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç:', responseText.substring(0, 30));
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞:', error.message);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
bot.on('message:photo', async (ctx) => {
  console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ');
  try {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø–µ—á–∞—Ç–∞–µ–º
    await ctx.api.sendChatAction(ctx.chat.id, "typing");
    
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    const photoInfo = ctx.message.photo;
    const fileId = photoInfo[photoInfo.length - 1].file_id;
    const fileInfo = await ctx.api.getFile(fileId);
    
    if (!fileInfo.file_path) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª");
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Ñ–æ—Ç–æ
    const photoUrl = `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${fileInfo.file_path}`;
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
    const caption = ctx.message.caption || "–û–ø–∏—à–∏, —á—Ç–æ –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏";
    
    // –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    const response = await axios.post(
      'https://openrouter.ai/api/v1/chat/completions',
      {
        model: 'meta-llama/llama-4-maverick:free',
        messages: [
          {
            role: 'system',
            content: '–¢—ã ARK-1, –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –ø–æ –¥–µ–ª—É –∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.'
          },
          {
            role: 'user',
            content: [
              { type: 'text', text: caption },
              { type: 'image_url', image_url: { url: photoUrl } }
            ]
          }
        ],
        max_tokens: 800
      },
      {
        headers: {
          'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
          'Content-Type': 'application/json',
        },
        timeout: 15000 // –ï—â–µ –±—ã—Å—Ç—Ä–µ–µ - 15 —Å–µ–∫—É–Ω–¥
      }
    );
    
    // –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const responseText = response.data.choices[0].message.content || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞';
    await ctx.reply(responseText);
    console.log('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ');
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error.message);
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (ctx) => {
  console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞');
  await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.');
});

// –•–µ–Ω–¥–ª–µ—Ä –ª—é–±—ã—Ö –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.catch((err) => {
  console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Telegram
module.exports = async (req, res) => {
  // –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º OK –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–æ–≤
  res.status(200).send('OK');
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
  try {
    if (req.body) {
      console.log('–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫:', req.body.update_id);
      await bot.handleUpdate(req.body);
    } else {
      console.error('–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–µ–ª–∞');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞:', error.message);
  }
};

// –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if (process.env.NODE_ENV !== 'production') {
  bot.start();
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!');
} 