// –§–∞–π–ª api/webhook.js –¥–ª—è Vercel Serverless Functions
// –≠—Ç–æ—Ç —Ñ–∞–π–ª –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã Vercel –ø—Ä–∞–≤–∏–ª—å–Ω–æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä–æ–≤–∞–ª –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram

// –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
const { Bot } = require('grammy');
const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
const BOT_NAME = "ARK-1";
const BOT_PLATFORM = "PLEXY";
const BOT_CREATOR = "@samgay_nis";

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
function logDebug(message, data = null) {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] ${message}`);
  if (data) {
    try {
      if (typeof data === 'object') {
        console.log(JSON.stringify(data, null, 2).substring(0, 1000));
      } else {
        console.log(String(data).substring(0, 1000));
      }
    } catch (e) {
      console.log("[–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö]");
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤
module.exports = async (req, res) => {
  logDebug('===== WEBHOOK –ü–û–õ–£–ß–ï–ù =====');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const token = process.env.TELEGRAM_BOT_TOKEN;
    const openrouterApiKey = process.env.OPENROUTER_API_KEY;
    const siteUrl = process.env.YOUR_SITE_URL || 'https://ark-seven.vercel.app';
    const siteName = process.env.YOUR_SITE_NAME || 'ARK-1 Bot';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏–π —Ç–æ–∫–µ–Ω–æ–≤)
    logDebug('–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', {
      'TELEGRAM_BOT_TOKEN': token ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
      'OPENROUTER_API_KEY': openrouterApiKey ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
      'WEBHOOK_URL': process.env.WEBHOOK_URL || '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
      'YOUR_SITE_URL': siteUrl,
      'YOUR_SITE_NAME': siteName,
      'VERCEL': process.env.VERCEL || '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if (!token) {
      logDebug('–û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return res.status(200).send('OK');
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    logDebug('–ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞:', req.method);
    if (req.body) {
      logDebug('–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', req.body);
    } else {
      logDebug('–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    }
    
    // –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã Telegram –Ω–µ –∂–¥–∞–ª
    res.status(200).send('OK');
    
    // –í—ã—è—Å–Ω—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram
    if (req.body && req.body.message) {
      const chatId = req.body.message.chat.id;
      const messageText = req.body.message.text || '';
      const userName = req.body.message.from.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      
      logDebug(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userName} (${chatId}): ${messageText}`);
      
      try {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        const bot = new Bot(token);
        logDebug('–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ /start
        if (messageText === '/start') {
          logDebug('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start');
          try {
            await bot.api.sendMessage(chatId, 
              `üëã –ü—Ä–∏–≤–µ—Ç, ${userName}! –Ø ${BOT_NAME}, –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ ${BOT_PLATFORM}.\n` +
              `–°–æ–∑–¥–∞–Ω –∫–æ–º–ø–∞–Ω–∏–µ–π ${BOT_CREATOR}.\n\n` +
              `–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ—á—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏.`
            );
            logDebug(`–û—Ç–≤–µ—Ç –Ω–∞ /start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç ${chatId}`);
          } catch (startError) {
            logDebug('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ /start:', startError);
          }
          return;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." —Å—Ç–∞—Ç—É—Å
        try {
          await bot.api.sendChatAction(chatId, "typing");
          logDebug('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç..."');
        } catch (typingError) {
          logDebug('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞ "–ø–µ—á–∞—Ç–∞–µ—Ç...":', typingError);
        }
        
        // –ï—Å–ª–∏ OPENROUTER API –∫–ª—é—á –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        if (openrouterApiKey && messageText) {
          logDebug('–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ OpenRouter API');
          
          try {
            // –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            let statusMsg;
            try {
              statusMsg = await bot.api.sendMessage(chatId, "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...");
              logDebug('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
            } catch (statusError) {
              logDebug('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', statusError);
            }
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
            const apiPayload = {
              model: 'meta-llama/llama-4-maverick:free',
              messages: [
                {
                  role: 'system',
                  content: `–¢—ã ${BOT_NAME}, –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ ${BOT_PLATFORM}, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–ø–∞–Ω–∏–µ–π ${BOT_CREATOR}. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í—Å–µ–≥–¥–∞ –ø–æ–ª–µ–∑–µ–Ω –∏ –¥—Ä—É–∂–µ–ª—é–±–µ–Ω.`
                },
                {
                  role: 'user',
                  content: messageText
                }
              ]
            };
            
            logDebug('–ó–∞–ø—Ä–æ—Å –∫ OpenRouter API:', apiPayload);
            
            // –ì–æ—Ç–æ–≤–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
            const headers = {
              'Authorization': `Bearer ${openrouterApiKey}`,
              'HTTP-Referer': siteUrl,
              'X-Title': siteName,
              'Content-Type': 'application/json'
            };
            
            logDebug('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API...');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            const response = await axios.post(
              'https://openrouter.ai/api/v1/chat/completions',
              apiPayload,
              { headers }
            );
            
            logDebug('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter API:', response.data);
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
            let aiResponse = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç.';
            
            if (response.data && 
                response.data.choices && 
                response.data.choices.length > 0 && 
                response.data.choices[0].message) {
              
              if (typeof response.data.choices[0].message.content === 'string') {
                aiResponse = response.data.choices[0].message.content;
              } else if (response.data.choices[0].message.content && 
                        Array.isArray(response.data.choices[0].message.content)) {
                // –î–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                const contentParts = response.data.choices[0].message.content
                  .filter(item => item && item.type === 'text' && item.text)
                  .map(item => item.text);
                
                if (contentParts.length > 0) {
                  aiResponse = contentParts.join('\n');
                }
              }
            }
            
            logDebug('–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ò–ò:', aiResponse.substring(0, 100) + '...');
            
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            if (statusMsg && statusMsg.message_id) {
              try {
                await bot.api.deleteMessage(chatId, statusMsg.message_id);
                logDebug('–°—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ');
              } catch (deleteError) {
                logDebug('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', deleteError);
              }
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò (–±–µ–∑ –æ–ø—Ü–∏–∏ parse_mode)
            try {
              await bot.api.sendMessage(chatId, aiResponse, {
                disable_web_page_preview: true
              });
              logDebug(`–ò–ò-–æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç ${chatId}`);
            } catch (sendError) {
              logDebug('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ò–ò-–æ—Ç–≤–µ—Ç–∞:', sendError);
              
              // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
              try {
                await bot.api.sendMessage(chatId, 
                  '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. ' +
                  '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.'
                );
              } catch (fallbackError) {
                logDebug('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ', fallbackError);
              }
            }
            
          } catch (aiError) {
            logDebug('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter API:', aiError);
            
            if (aiError.response) {
              logDebug('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ API:', {
                status: aiError.response.status,
                data: aiError.response.data
              });
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            try {
              await bot.api.sendMessage(chatId, 
                '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –ò–ò. ' +
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.'
              );
            } catch (errorMsgError) {
              logDebug('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', errorMsgError);
            }
          }
        } else {
          // –ï—Å–ª–∏ –∫–ª—é—á OpenRouter –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ
          if (messageText) {
            logDebug('OpenRouter API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
            try {
              await bot.api.sendMessage(chatId, 
                `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${userName}! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ—É–Ω–∫—Ü–∏–∏ –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n\n` +
                `–í–∞—à –∑–∞–ø—Ä–æ—Å: "${messageText}"\n\n` +
                `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.`
              );
              logDebug(`–ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç ${chatId} (–ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)`);
            } catch (simpleError) {
              logDebug('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:', simpleError);
            }
          }
        }
      } catch (botError) {
        logDebug('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', botError);
      }
      
      return;
    } else {
      logDebug('–ó–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç');
    }
    
  } catch (error) {
    logDebug('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤–µ–±—Ö—É–∫–æ–≤:', error);
  } finally {
    logDebug('===== –û–ë–†–ê–ë–û–¢–ö–ê WEBHOOK –ó–ê–í–ï–†–®–ï–ù–ê =====');
  }
}; 